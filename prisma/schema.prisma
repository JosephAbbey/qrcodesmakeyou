// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PRISMA_URL") // uses connection pooling
  directUrl = env("DATABASE_URL_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("DATABASE_URL_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  expires_in        Int? // Given  by spotify
  token_at          DateTime @default(now())
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  error             Boolean  @default(false)
  username          String?
  email             String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  themes Theme[] @relation("ThemeToUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Theme {
  id String @id @default(cuid())

  users User[] @relation("ThemeToUser")

  light        String?
  dark         String?
  corners_path String?
  corners_fill String?
  rounded      Boolean @default(false)
}
